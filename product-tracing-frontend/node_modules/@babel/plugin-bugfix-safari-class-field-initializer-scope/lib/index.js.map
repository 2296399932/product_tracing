{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport { types as t } from \"@babel/core\";\nimport type { NodePath } from \"@babel/core\";\n\nfunction needsWrapping(node: t.Node): boolean {\n  if (t.isLiteral(node) && !t.isTemplateLiteral(node)) {\n    return false;\n  }\n\n  if (\n    t.isCallExpression(node) ||\n    t.isOptionalCallExpression(node) ||\n    t.isNewExpression(node)\n  ) {\n    return needsWrapping(node.callee) || node.arguments.some(needsWrapping);\n  }\n\n  if (t.isTemplateLiteral(node)) {\n    return node.expressions.some(needsWrapping);\n  }\n\n  if (t.isTaggedTemplateExpression(node)) {\n    return needsWrapping(node.tag) || needsWrapping(node.quasi);\n  }\n\n  if (t.isArrayExpression(node)) {\n    return node.elements.some(needsWrapping);\n  }\n\n  if (t.isObjectExpression(node)) {\n    return node.properties.some(prop => {\n      if (t.isObjectProperty(prop)) {\n        return 